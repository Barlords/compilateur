
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocIS_SUPPIS_SUPP_0R_EQUALSIS_INFIS_INF_OR_EQUALSIS_EQUALSleftPLUSMINUSleftTIMESDIVIDEAND COMMA DECR DIVIDE DIVIDE_EQUALS ELSE EMPTY EQUALS FALSE FOR FUNCTION IF INCR IS_EQUALS IS_INF IS_INF_OR_EQUALS IS_SUPP IS_SUPP_0R_EQUALS LACO LCOMMENT LPAREN MINUS MINUS_EQUALS MINUS_MINUS NAME NULL NUMBER OR PLUS PLUS_EQUALS PLUS_PLUS PRINT QUOT RACO RCOMMENT RETURN RPAREN SEMICOLON SPACE TIMES TIMES_EQUALS TRUE VOID WHILESTART : bloc bloc : bloc statement SEMICOLON\n            | statement SEMICOLON\n            | bloc LCOMMENT comment RCOMMENT\n            | LCOMMENT comment RCOMMENTstatement    : PRINT LPAREN expression RPAREN\n                    | PRINT LPAREN QUOT expression QUOT RPARENcomment  : NAME\n                | NAME SPACE commentstatement : NAME EQUALS expressionstatement : NAME INCR\n                | NAME DECRstatement : NAME PLUS_EQUALS expression\n                | NAME MINUS_EQUALS expression\n                | NAME TIMES_EQUALS expression\n                | NAME DIVIDE_EQUALS expressionexpression : expression MINUS expression\n\t\t\t\t| expression PLUS expression\n\t\t\t\t| expression TIMES expression\n\t\t\t\t| expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBER\n                | NAMEexpression : TRUE\n                | FALSEexpression : expression IS_SUPP expression\n                | expression IS_SUPP_0R_EQUALS expression\n                | expression IS_INF expression\n                | expression IS_INF_OR_EQUALS expression\n                | expression IS_EQUALS expression\n                | expression AND expression\n                | expression OR expressionstatement : IF LPAREN expression RPAREN LACO bloc RACO\n            | IF LPAREN expression RPAREN LACO bloc RACO ELSE LACO bloc RACO statement : WHILE LPAREN expression RPAREN LACO bloc RACOstatement : FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LACO bloc RACOargs : expression\n            | expression COMMA argsstatement : FUNCTION NAME LPAREN RPAREN LACO bloc RACO\n                | FUNCTION NAME LPAREN args RPAREN LACO bloc RACO'
    
_lr_action_items = {'LCOMMENT':([0,2,13,28,30,48,83,84,86,90,91,93,94,100,104,105,106,107,],[4,12,-3,-2,-5,-4,4,4,4,12,12,12,4,12,4,4,12,12,]),'PRINT':([0,2,13,26,28,30,48,83,84,86,90,91,92,93,94,100,104,105,106,107,],[5,5,-3,5,-2,-5,-4,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NAME':([0,2,4,10,12,13,16,17,20,21,22,23,24,25,26,28,30,31,32,34,47,48,52,53,54,55,56,57,58,59,60,61,62,66,83,84,86,88,90,91,92,93,94,100,104,105,106,107,],[6,6,15,27,15,-3,36,36,36,36,36,36,36,36,6,-2,-5,15,36,36,36,-4,36,36,36,36,36,36,36,36,36,36,36,36,6,6,6,36,6,6,6,6,6,6,6,6,6,6,]),'IF':([0,2,13,26,28,30,48,83,84,86,90,91,92,93,94,100,104,105,106,107,],[7,7,-3,7,-2,-5,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'WHILE':([0,2,13,26,28,30,48,83,84,86,90,91,92,93,94,100,104,105,106,107,],[8,8,-3,8,-2,-5,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'FOR':([0,2,13,26,28,30,48,83,84,86,90,91,92,93,94,100,104,105,106,107,],[9,9,-3,9,-2,-5,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'FUNCTION':([0,2,13,26,28,30,48,83,84,86,90,91,92,93,94,100,104,105,106,107,],[10,10,-3,10,-2,-5,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,13,28,30,48,],[0,-1,-3,-2,-5,-4,]),'SEMICOLON':([3,11,18,19,35,36,37,38,39,40,41,42,43,46,51,70,71,72,73,74,75,76,77,78,79,80,81,85,89,96,97,99,103,108,109,],[13,28,-11,-12,-22,-23,-24,-25,-10,-13,-14,-15,-16,66,-6,-21,-17,-18,-19,-20,-26,-27,-28,-29,-30,-31,-32,92,-7,-33,-35,-39,-40,-34,-36,]),'LPAREN':([5,7,8,9,16,17,20,21,22,23,24,25,27,32,34,47,52,53,54,55,56,57,58,59,60,61,62,66,88,],[16,24,25,26,32,32,32,32,32,32,32,32,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'EQUALS':([6,],[17,]),'INCR':([6,],[18,]),'DECR':([6,],[19,]),'PLUS_EQUALS':([6,],[20,]),'MINUS_EQUALS':([6,],[21,]),'TIMES_EQUALS':([6,],[22,]),'DIVIDE_EQUALS':([6,],[23,]),'RACO':([13,28,30,48,90,91,93,100,106,107,],[-3,-2,-5,-4,96,97,99,103,108,109,]),'RCOMMENT':([14,15,29,49,],[30,-8,48,-9,]),'SPACE':([15,],[31,]),'QUOT':([16,35,36,37,38,63,70,71,72,73,74,75,76,77,78,79,80,81,],[34,-22,-23,-24,-25,82,-21,-17,-18,-19,-20,-26,-27,-28,-29,-30,-31,-32,]),'NUMBER':([16,17,20,21,22,23,24,25,32,34,47,52,53,54,55,56,57,58,59,60,61,62,66,88,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'TRUE':([16,17,20,21,22,23,24,25,32,34,47,52,53,54,55,56,57,58,59,60,61,62,66,88,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([16,17,20,21,22,23,24,25,32,34,47,52,53,54,55,56,57,58,59,60,61,62,66,88,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'RPAREN':([18,19,33,35,36,37,38,39,40,41,42,43,44,45,47,50,51,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,95,96,97,98,99,103,108,109,],[-11,-12,51,-22,-23,-24,-25,-10,-13,-14,-15,-16,64,65,67,70,-6,87,-37,-21,-17,-18,-19,-20,-26,-27,-28,-29,-30,-31,-32,89,-7,-38,-33,-35,102,-39,-40,-34,-36,]),'MINUS':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[52,-22,-23,-24,-25,52,52,52,52,52,52,52,52,52,52,-21,-17,-18,-19,-20,52,52,52,52,52,52,52,52,]),'PLUS':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[53,-22,-23,-24,-25,53,53,53,53,53,53,53,53,53,53,-21,-17,-18,-19,-20,53,53,53,53,53,53,53,53,]),'TIMES':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[54,-22,-23,-24,-25,54,54,54,54,54,54,54,54,54,54,-21,54,54,-19,-20,54,54,54,54,54,54,54,54,]),'DIVIDE':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[55,-22,-23,-24,-25,55,55,55,55,55,55,55,55,55,55,-21,55,55,-19,-20,55,55,55,55,55,55,55,55,]),'IS_SUPP':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[56,-22,-23,-24,-25,56,56,56,56,56,56,56,56,56,56,-21,-17,-18,-19,-20,None,None,None,None,None,56,56,56,]),'IS_SUPP_0R_EQUALS':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[57,-22,-23,-24,-25,57,57,57,57,57,57,57,57,57,57,-21,-17,-18,-19,-20,None,None,None,None,None,57,57,57,]),'IS_INF':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[58,-22,-23,-24,-25,58,58,58,58,58,58,58,58,58,58,-21,-17,-18,-19,-20,None,None,None,None,None,58,58,58,]),'IS_INF_OR_EQUALS':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[59,-22,-23,-24,-25,59,59,59,59,59,59,59,59,59,59,-21,-17,-18,-19,-20,None,None,None,None,None,59,59,59,]),'IS_EQUALS':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[60,-22,-23,-24,-25,60,60,60,60,60,60,60,60,60,60,-21,-17,-18,-19,-20,None,None,None,None,None,60,60,60,]),'AND':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[61,-22,-23,-24,-25,61,61,61,61,61,61,61,61,61,61,-21,-17,-18,-19,-20,-26,-27,-28,-29,-30,-31,61,61,]),'OR':([33,35,36,37,38,39,40,41,42,43,44,45,50,63,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[62,-22,-23,-24,-25,62,62,62,62,62,62,62,62,62,62,-21,-17,-18,-19,-20,-26,-27,-28,-29,-30,-31,-32,62,]),'COMMA':([35,36,37,38,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-22,-23,-24,-25,88,-21,-17,-18,-19,-20,-26,-27,-28,-29,-30,-31,-32,]),'LACO':([64,65,67,87,101,102,],[83,84,86,94,104,105,]),'ELSE':([96,],[101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'START':([0,],[1,]),'bloc':([0,83,84,86,94,104,105,],[2,90,91,93,100,106,107,]),'statement':([0,2,26,83,84,86,90,91,92,93,94,100,104,105,106,107,],[3,11,46,3,3,3,11,11,98,11,3,11,3,3,11,11,]),'comment':([4,12,31,],[14,29,49,]),'expression':([16,17,20,21,22,23,24,25,32,34,47,52,53,54,55,56,57,58,59,60,61,62,66,88,],[33,39,40,41,42,43,44,45,50,63,69,71,72,73,74,75,76,77,78,79,80,81,85,69,]),'args':([47,88,],[68,95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> START","S'",1,None,None,None),
  ('START -> bloc','START',1,'p_start','calcBase.py',110),
  ('bloc -> bloc statement SEMICOLON','bloc',3,'p_bloc','calcBase.py',121),
  ('bloc -> statement SEMICOLON','bloc',2,'p_bloc','calcBase.py',122),
  ('bloc -> bloc LCOMMENT comment RCOMMENT','bloc',4,'p_bloc','calcBase.py',123),
  ('bloc -> LCOMMENT comment RCOMMENT','bloc',3,'p_bloc','calcBase.py',124),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','calcBase.py',134),
  ('statement -> PRINT LPAREN QUOT expression QUOT RPAREN','statement',6,'p_statement_print','calcBase.py',135),
  ('comment -> NAME','comment',1,'p_statement_comment','calcBase.py',142),
  ('comment -> NAME SPACE comment','comment',3,'p_statement_comment','calcBase.py',143),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calcBase.py',146),
  ('statement -> NAME INCR','statement',2,'p_statement_increment_var','calcBase.py',150),
  ('statement -> NAME DECR','statement',2,'p_statement_increment_var','calcBase.py',151),
  ('statement -> NAME PLUS_EQUALS expression','statement',3,'p_statement_modif_var','calcBase.py',155),
  ('statement -> NAME MINUS_EQUALS expression','statement',3,'p_statement_modif_var','calcBase.py',156),
  ('statement -> NAME TIMES_EQUALS expression','statement',3,'p_statement_modif_var','calcBase.py',157),
  ('statement -> NAME DIVIDE_EQUALS expression','statement',3,'p_statement_modif_var','calcBase.py',158),
  ('expression -> expression MINUS expression','expression',3,'p_expression_opperation','calcBase.py',162),
  ('expression -> expression PLUS expression','expression',3,'p_expression_opperation','calcBase.py',163),
  ('expression -> expression TIMES expression','expression',3,'p_expression_opperation','calcBase.py',164),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_opperation','calcBase.py',165),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcBase.py',169),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcBase.py',173),
  ('expression -> NAME','expression',1,'p_expression_number','calcBase.py',174),
  ('expression -> TRUE','expression',1,'p_expression_bool','calcBase.py',178),
  ('expression -> FALSE','expression',1,'p_expression_bool','calcBase.py',179),
  ('expression -> expression IS_SUPP expression','expression',3,'p_expression_bool_compare','calcBase.py',186),
  ('expression -> expression IS_SUPP_0R_EQUALS expression','expression',3,'p_expression_bool_compare','calcBase.py',187),
  ('expression -> expression IS_INF expression','expression',3,'p_expression_bool_compare','calcBase.py',188),
  ('expression -> expression IS_INF_OR_EQUALS expression','expression',3,'p_expression_bool_compare','calcBase.py',189),
  ('expression -> expression IS_EQUALS expression','expression',3,'p_expression_bool_compare','calcBase.py',190),
  ('expression -> expression AND expression','expression',3,'p_expression_bool_compare','calcBase.py',191),
  ('expression -> expression OR expression','expression',3,'p_expression_bool_compare','calcBase.py',192),
  ('statement -> IF LPAREN expression RPAREN LACO bloc RACO','statement',7,'p_statement_if','calcBase.py',196),
  ('statement -> IF LPAREN expression RPAREN LACO bloc RACO ELSE LACO bloc RACO','statement',11,'p_statement_if','calcBase.py',197),
  ('statement -> WHILE LPAREN expression RPAREN LACO bloc RACO','statement',7,'p_statement_while','calcBase.py',204),
  ('statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LACO bloc RACO','statement',11,'p_statement_for','calcBase.py',208),
  ('args -> expression','args',1,'p_args','calcBase.py',212),
  ('args -> expression COMMA args','args',3,'p_args','calcBase.py',213),
  ('statement -> FUNCTION NAME LPAREN RPAREN LACO bloc RACO','statement',7,'p_statement_declare_func','calcBase.py',220),
  ('statement -> FUNCTION NAME LPAREN args RPAREN LACO bloc RACO','statement',8,'p_statement_declare_func','calcBase.py',221),
]
